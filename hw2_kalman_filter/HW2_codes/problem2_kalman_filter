import numpy as np
import math
import matplotlib.pyplot as plt

C = np.array([[1, 0, 0, 0]])
A = np.array([[1, 0.1, 0, 0], [0, 1, 0.1, 0], [0, 0, 1, 0.1],[0, 0, 0, 1]])

def kalman_filter(m_t1, cov_t1, z_t):
    transpose_C = np.array([[1], [0], [0], [0]]) 
    cov_t1 = cov_t1.reshape(4,4) # reshaping for matrix operations

    bel_m_t = np.dot(A, m_t1) 
    bel_cov_t = np.dot(np.dot(A, cov_t1), np.transpose(A))
    Q = np.eye(np.dot(np.dot(C, bel_cov_t), transpose_C).shape[0]) # identity matrix of specified size
    K_t = np.dot(np.dot(bel_cov_t, transpose_C), np.linalg.inv(np.dot(np.dot(C, bel_cov_t), transpose_C) + Q))
    m_t = bel_m_t + np.dot(K_t, (z_t - np.dot(C, bel_m_t)))
    I = np.eye(np.dot(K_t, C).shape[0]) # identity matrix of specified size
    cov_t = np.dot((I - np.dot(K_t, C)), bel_cov_t)
    return m_t, cov_t

def plot_prediction(t, ground_truth, measurement, predict_mean, predict_cov):
    """
    Plot ground truth vs. predicted value.

    :param t: 1-dimensional array representing timesteps, in seconds.
    :param ground_truth: 100x1 array of ground truth values
    :param measurement: 100x1 array of sensor values
    :param predict_mean: 100x1 array of mean vectors
    :param predict_cov: 100x1x1 array of covariance matrices
    """
    predict_pos_mean = np.array(predict_mean)[:, 0].reshape(100)
    predict_pos_std = np.array(predict_cov)[:, 0, 0]
    plt.figure()
    plt.plot(t, ground_truth, color='k')
    plt.plot(t, measurement, color='r')
    plt.plot(t, predict_pos_mean, color='g')
    plt.fill_between(
    t,
    predict_pos_mean-predict_pos_std,
    predict_pos_mean+predict_pos_std,
    color='g',
    alpha=0.5)    
    plt.legend(("ground truth", "measurements", "predictions"))
    plt.xlabel("time (s)")
    plt.ylabel("position (m)")
    plt.title("Predicted Values")
    plt.show()

def plot_mse(t, ground_truth, predict_means):
    """
    Plot MSE of your KF over many trials.

    :param t: 1-dimensional array representing timesteps, in seconds.
    :param ground_truth: 100x1 array of ground truth values
    :param predict_means: 10000x100x1 array of 100 mean vectors over 10000 trials
    """
    predict_pos_means = np.array(predict_means)[:, :, 0]
    errors = ground_truth.squeeze() - predict_pos_means
    
    mse = np.mean(errors, axis=0) ** 2
    plt.figure()
    plt.plot(t, [array[0] for array in mse])
    plt.xlabel("time (s)")
    plt.ylabel("position MSE (m^2)")
    plt.title("Prediction Mean-Squared Error")
    plt.show()

if __name__ == "__main__":
    x_t = np.array([[0], [0], [0], [0]]) # x(t) = [p(t), v(t), a(t), j(t)] T, x(0) = 0
    t = np.arange(0, 10, 0.1)

    noises = []

    for i in range(10000):
        noise = np.random.normal(0, 1, 100) # v(t): zero-mean Gaussian sensor noise with variance Q = 1.0
        noises.append([noise])

    noises = np.array(noises)

    ground_truth = np.array([])
    noisy_data = np.array([])
    predict_means = np.empty((0, 100, 4))

    for i in range(100):
        p = math.sin(0.1*i)
        noisy_data = np.append(noisy_data, p + noise[i])

    ground_truth = np.sin(np.arange(100)*0.1)
    # run Kalman Filter N=10000 times with given initial belief conditions
    for i in range(10000):
        # Initial belief states of Kalman Filter, mean and covariance
        m_t = np.array([[5], [1], [0], [0]])
        cov_t = np.array([[10, 0, 0, 0], [0, 10, 0, 0], [0, 0, 10, 0],[0, 0, 0, 10]])
        predict_mean = [m_t]
        predict_cov = [cov_t]
        for j in range(99):
            print(noises[i][:, j])
            z_t = np.dot(C, x_t) + noises[i][:, j]
            m_t, cov_t = kalman_filter(m_t, cov_t, z_t)
            predict_mean.append(m_t)
            predict_cov.append(cov_t)
        # plot prediction for only the first trial of Kalman Filter 
        if i == 0:
            plot_prediction(np.arange(100)*0.1, ground_truth, noisy_data, predict_mean, predict_cov)
            predict_means = [predict_mean]
        else:
            predict_means.append(predict_mean)
    # plot mean squared error for each trial of Kalman Filter (N = 10000)
    plot_mse(np.arange(100)*0.1, ground_truth, predict_means)